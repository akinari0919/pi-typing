// 円周率の値（1000桁）
const PI_1000 = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873110146849289171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912989833673362440656643086021394946395224737190702179860943702770539217176293176752384677849562387523806337765149510763176831131467689405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731152836953692399072972063629812604947283620410147733624043327267415540304119076723637457742830386068689752414044081765650688265754886836087511793070035857647486899610998709359402469786156753953959609128372907232558923733923673953626060628929154042760843890872284702389403661362688762756388912494415209689661064698399711068726746697846448896249073482427430248565620738950530837801907565428483953948373151530574486592535610627916473599453094957413290804310455900385104865273682930450427425261055542456610";
// 表示用の円周率（1000桁）
const piDisplay = PI_1000;

// ゲームの状態を管理するオブジェクト
const gameState = {
    currentIndex: 0,
    userInput: '',
};

// ゲームの開始
function start() {
    const startButton = document.getElementById('start-button');
    startButton.style.display = 'none'; // スタートボタンを非表示にする

    gameState.currentIndex = 0;
    gameState.userInput = '';
    updateGameStatus('進行中');
    displayDigits();
    document.addEventListener('keydown', handleUserInput);
}

// 画面に円周率の数字を表示する関数
function displayDigits() {
  const digitsDisplay = document.getElementById('digits');
  digitsDisplay.innerHTML = '';

  for (let i = 0; i < PI_1000.length; i++) {
    const digit = document.createElement('div');
    digit.textContent = PI_1000.charAt(i);
    if (i === gameState.currentIndex) {
      digit.classList.add('current-digit');
    }
    digitsDisplay.appendChild(digit);
  }
}

// ユーザーの入力を処理する関数
function handleUserInput(e) {
    const inputDisplay = document.getElementById('user-input');
    const currentDigit = PI_1000.charAt(gameState.currentIndex);

    if (e.key === currentDigit) {
        gameState.userInput += e.key;
        gameState.currentIndex++;
        inputDisplay.textContent = ''; // 入力した桁を非表示にする
        displayDigits();

        if (gameState.currentIndex === PI_1000.length) {
            updateGameStatus('クリア');
            document.removeEventListener('keydown', handleUserInput);
        }
    }
}

// ゲームの状態を更新する関数
function updateGameStatus(status) {
    const gameStatusDisplay = document.getElementById('game-status');
    gameStatusDisplay.textContent = status;
}

// ゲームの初期化
function init() {
    updateGameStatus('待機中');
    const startButton = document.getElementById('start-button');
    startButton.addEventListener('click', start);
}

// ゲームの開始
init();
